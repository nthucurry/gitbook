input {
  beats {
    host => "t-elk"
    port => "1000"
    codec => "json"
  }
}

filter {
  json {
    source => "message"
    target => "log"
  }

  mutate {
    remove_field => [ "path", "host", "agent", "cloud", "log" ]
  }

  split { field => "[records]" }
  split { field => "[records][properties]" }
  split { field => "[records][properties][flows]" }
  split { field => "[records][properties][flows][flows]" }
  split { field => "[records][properties][flows][flows][flowTuples]" }

  mutate { # CRUD
    remove_field => [ "records", "tags" ]
    add_field => {
      "rule" => "%{[records][properties][flows][rule]}"
      "flowTuples" => "%{[records][properties][flows][flows][flowTuples]}"
      "macAddress" => "%{[records][macAddress]}"
      "time" => "%{[records][time]}"
    }
  }

  grok { # parse
    match => [
      "flowTuples",
        "%{DATA:timeStamp}\,%{IP:sourceIP}\,%{IP:destinationIP}\,%{NUMBER:sourcePort}\,%{NUMBER:destinationPort}\,%{DATA:protocol}\,%{DATA:trafficFlow}\,%{DATA:trafficDecision}\,%{DATA:flowState}\,%{DATA:packetsSourceToDestination}\,%{DATA:bytesSentSourceToDestination}\,%{DATA:packetsDestinationToSource}\,%{DATA:bytesSentDestinationToSource}"
    ]
  }

  geoip {
    source => "sourceIP"
    target => "sourceGeoIP"
    fields => ["city_name", "country_name", "region_name", "timezone"]
  }

  geoip {
    source => "destinationIP"
    target => "destinationGeoIP"
    fields => ["city_name", "country_name", "region_name", "timezone"]
  }
}

output {
  # if [sourceIP] !~ /10.\d.\d.\d|172.17.\d.\d/ and [destinationIP] !~ /10.\d.\d.\d|172.17.\d.\d/ {
    elasticsearch {
      hosts => ["http://t-elk:9200", "http://t-elk-1:9200", "http://t-elk-2:9200"]
      #user => "elastic"
      #password => "password"
      index => "azure-nsg-flow-%{+YYYY.MM.dd}"
    }
  # }
}