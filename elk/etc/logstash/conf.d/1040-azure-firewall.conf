input {
  beats {
    host => "t-elk"
    port => "1040"
    codec => "json"
  }
}

filter {
  json {
    source => "message"
    target => "log"
  }

  if [properties][msg] =~ "DNS" or [properties][msg] =~ "ICMP" or [properties][msg] =~ "Failed to resolve FQDN" {
    drop {}
  }

  mutate {
    remove_field => [ "path", "host", "agent", "cloud", "log", "ecs", "log_type" ]
  }

  mutate {
    remove_field => [ "properties", "resourceId", "operationName", "category" ]
    add_field => {
      "msg" => "%{[properties][msg]}"
    }
  }

  if [msg] =~ "TCP" or [msg] =~ "UDP" {
    grok {
      match => { "msg" =>
        "%{DATA:osiLevel} request from %{DATA:sourceIP}:%{INT:sourcePort} to %{DATA:destination}:%{INT:destinationPort}. Action: %{DATA:action}$"
      }
    }
    geoip {
      source => "destination"
      target => "destinationGeoIP"
      fields => ["city_name", "country_name", "region_name", "timezone"]
    }
  } else if [msg] =~ "HTTP" or [msg] =~ "HTTPS" {
    if [msg] =~ "Rule Collection Group" {
      grok {
        match => { "msg" =>
          "%{DATA:osiLevel} request from %{DATA:sourceIP}:%{INT:sourcePort} to %{DATA:destination}:%{INT:destinationPort}. Action: %{DATA:action}\. Policy: %{DATA:policy}\. Rule Collection Group: %{DATA:defaultApplicationRuleCollectionGroup}\. Rule Collection: %{DATA:ruleCollection}\. Rule: %{DATA:rule}$"
        }
      }
    } else {
      grok {
        match => { "msg" =>
          "%{DATA:osiLevel} request from %{DATA:sourceIP}:%{INT:sourcePort} to %{DATA:destination}:%{INT:destinationPort}. Action: %{DATA:action}\. %{DATA:rule}$"
        }
      }
    }
  }

  mutate {
    remove_field => [ "msg" ]
  }
}

output {
  elasticsearch {
    hosts => "http://t-elk:9200"
    #user => "elastic"
    #password => "password"
    index => "azure-firewall-%{+YYYY.MM.dd}"
  }
}